#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct cell {
    int num;
    int counted;
};

int regionSize(int cellRow, int cellCol, int rows, int cols, struct cell cells[rows][cols]) {
    if(cellRow >= rows || cellCol >= cols || cellRow < 0 || cellCol < 0)
        return 0;
    struct cell *c = &cells[cellRow][cellCol];
    if(c->num == 0 || c->counted == 1) 
        return 0;
    else {
        c->counted = 1;
        return 1 + regionSize(cellRow + 1, cellCol, rows, cols, cells)
                + regionSize(cellRow + 1, cellCol + 1, rows, cols, cells)
                + regionSize(cellRow + 1, cellCol - 1, rows, cols, cells)
                + regionSize(cellRow, cellCol + 1, rows, cols, cells)
                + regionSize(cellRow, cellCol - 1, rows, cols, cells)
                + regionSize(cellRow - 1, cellCol - 1, rows, cols, cells)
                + regionSize(cellRow - 1, cellCol, rows, cols, cells)
                + regionSize(cellRow - 1, cellCol + 1, rows, cols, cells);
    }
}

int main() {

    int m, n;
    scanf("%d %d", &m, &n);
    struct cell matrix[m][n];
    for(int i = 0; i < m; i++) {
        for(int j = 0; j < n; j++) {
            scanf("%d", &(matrix[i][j].num));
            matrix[i][j].counted = 0;
        }
    }
    int maxRegionSize = 0;
    int rs;
    for(int r = 0; r < m; r++) {
        for(int c = 0; c < n; c++) {
            rs = regionSize(r, c, m, n, matrix);
            if(rs > maxRegionSize) {
                maxRegionSize = rs;
            }
        }
    }
    printf("%d", maxRegionSize);
    return 0;
}